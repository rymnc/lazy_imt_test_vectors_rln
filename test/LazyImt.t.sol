// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {LazyIMT, LazyIMTData} from "imt.sol/LazyIMT.sol";
import {BinaryIMT, BinaryIMTData} from "imt.sol/BinaryIMT.sol";
import {PoseidonT3} from "poseidon-solidity/PoseidonT3.sol";

contract LazyIMTTest is Test {
    LazyIMTData public data;
    BinaryIMTData public binaryData;

    uint256 _root;

    function lazyInit(uint8 depth) internal {
        LazyIMT.init(data, depth);
    }

    function binaryInit(uint8 depth) internal {
        BinaryIMT.init(binaryData, depth, 0);
    }

    function lazyReset() internal {
        LazyIMT.reset(data);
    }

    function lazyInsert(uint256 leaf) internal {
        LazyIMT.insert(data, leaf);
    }

    function binaryInsert(uint256 leaf) internal {
        BinaryIMT.insert(binaryData, leaf);
    }

    function lazyRoot() internal view returns (uint256) {
        return LazyIMT.root(data);
    }

    function binaryRoot() internal view returns (uint256) {
        return binaryData.root;
    }

    function setUp() public {
        lazyInit(20);
        binaryInit(20);
    }

    function testILazyInsertions() public {
        lazyInsert(19143711682366759980911001457853255795836264632723844153354310748778748156460);
        lazyInsert(16984765328852711772291441487727981184905800779020079168989152080434188364678);
        lazyInsert(10972315136095845343447418815139813428649316683283020632475608655814722712541);
        lazyInsert(2709631781045191277266130708832884002577134582503944059038971337978087532997);
        lazyInsert(8255654132980945447086418574686169461187805238257784695584517016324877809505);
        lazyInsert(20291701150251695209910387548168084091751201746043024067531503187703236470983);
        lazyInsert(11817872986033932471261438074921403500882957864164537515599299873089437746577);
        lazyInsert(18475838919635792169148272767721284591038756730004222133003018558598315558783);
        lazyInsert(10612118277928165031660389522171737855229037400929675201853245490188277695983);
        lazyInsert(17318633845296358766427229711888486415250435256643711009388405482885762601797);

        console2.log("root: %s", lazyRoot());
    }

    function testIBinaryInsertions() public {
        binaryInsert(19143711682366759980911001457853255795836264632723844153354310748778748156460);
        binaryInsert(16984765328852711772291441487727981184905800779020079168989152080434188364678);
        binaryInsert(10972315136095845343447418815139813428649316683283020632475608655814722712541);
        binaryInsert(2709631781045191277266130708832884002577134582503944059038971337978087532997);
        binaryInsert(8255654132980945447086418574686169461187805238257784695584517016324877809505);
        binaryInsert(20291701150251695209910387548168084091751201746043024067531503187703236470983);
        binaryInsert(11817872986033932471261438074921403500882957864164537515599299873089437746577);
        binaryInsert(18475838919635792169148272767721284591038756730004222133003018558598315558783);
        binaryInsert(10612118277928165031660389522171737855229037400929675201853245490188277695983);
        binaryInsert(17318633845296358766427229711888486415250435256643711009388405482885762601797);

        console2.log("root: %s", binaryRoot());
    }

    function testHasher() public {
        assertEq(
            PoseidonT3.hash([19014214495641488759237505126948346942972912379615652741039992445865937985820, 0]),
            13164376930590487041313497514223288845711140604177161029957349518915056324115
        );
    }
}
